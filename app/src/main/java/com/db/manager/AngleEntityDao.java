package com.db.manager;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.hu.huproject.Entity.AngleEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANGLE_ENTITY".
*/
public class AngleEntityDao extends AbstractDao<AngleEntity, Long> {

    public static final String TABLENAME = "ANGLE_ENTITY";

    /**
     * Properties of entity AngleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, long.class, "key", false, "KEY");
        public final static Property MaxAngle = new Property(2, String.class, "maxAngle", false, "MAX_ANGLE");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATE_TIME");
        public final static Property PointAngle = new Property(4, String.class, "pointAngle", false, "POINT_ANGLE");
        public final static Property RunTime = new Property(5, String.class, "runTime", false, "RUN_TIME");
    }


    public AngleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AngleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANGLE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY\" INTEGER NOT NULL ," + // 1: key
                "\"MAX_ANGLE\" TEXT," + // 2: maxAngle
                "\"CREATE_TIME\" TEXT," + // 3: createTime
                "\"POINT_ANGLE\" TEXT," + // 4: pointAngle
                "\"RUN_TIME\" TEXT);"); // 5: runTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANGLE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AngleEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKey());
 
        String maxAngle = entity.getMaxAngle();
        if (maxAngle != null) {
            stmt.bindString(3, maxAngle);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String pointAngle = entity.getPointAngle();
        if (pointAngle != null) {
            stmt.bindString(5, pointAngle);
        }
 
        String runTime = entity.getRunTime();
        if (runTime != null) {
            stmt.bindString(6, runTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AngleEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKey());
 
        String maxAngle = entity.getMaxAngle();
        if (maxAngle != null) {
            stmt.bindString(3, maxAngle);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String pointAngle = entity.getPointAngle();
        if (pointAngle != null) {
            stmt.bindString(5, pointAngle);
        }
 
        String runTime = entity.getRunTime();
        if (runTime != null) {
            stmt.bindString(6, runTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AngleEntity readEntity(Cursor cursor, int offset) {
        AngleEntity entity = new AngleEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // maxAngle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pointAngle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // runTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AngleEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.getLong(offset + 1));
        entity.setMaxAngle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPointAngle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRunTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AngleEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AngleEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AngleEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
