package com.db.manager;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.hu.huproject.Entity.ManZaiDownEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAN_ZAI_DOWN_ENTITY".
*/
public class ManZaiDownEntityDao extends AbstractDao<ManZaiDownEntity, Long> {

    public static final String TABLENAME = "MAN_ZAI_DOWN_ENTITY";

    /**
     * Properties of entity ManZaiDownEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, long.class, "key", false, "KEY");
        public final static Property MaxSpeed = new Property(2, String.class, "maxSpeed", false, "MAX_SPEED");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Point_speed = new Property(4, String.class, "point_speed", false, "POINT_SPEED");
        public final static Property RunTimeTotal = new Property(5, String.class, "runTimeTotal", false, "RUN_TIME_TOTAL");
        public final static Property BreakTime = new Property(6, String.class, "breakTime", false, "BREAK_TIME");
        public final static Property ZhiDongJuli = new Property(7, String.class, "zhiDongJuli", false, "ZHI_DONG_JULI");
        public final static Property ZhiDongChuSuDu = new Property(8, String.class, "zhiDongChuSuDu", false, "ZHI_DONG_CHU_SU_DU");
        public final static Property LiuMiaoJuLi = new Property(9, String.class, "liuMiaoJuLi", false, "LIU_MIAO_JU_LI");
        public final static Property ZhiDongShiJian = new Property(10, String.class, "zhiDongShiJian", false, "ZHI_DONG_SHI_JIAN");
    }


    public ManZaiDownEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ManZaiDownEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAN_ZAI_DOWN_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY\" INTEGER NOT NULL ," + // 1: key
                "\"MAX_SPEED\" TEXT," + // 2: maxSpeed
                "\"CREATE_TIME\" TEXT," + // 3: createTime
                "\"POINT_SPEED\" TEXT," + // 4: point_speed
                "\"RUN_TIME_TOTAL\" TEXT," + // 5: runTimeTotal
                "\"BREAK_TIME\" TEXT," + // 6: breakTime
                "\"ZHI_DONG_JULI\" TEXT," + // 7: zhiDongJuli
                "\"ZHI_DONG_CHU_SU_DU\" TEXT," + // 8: zhiDongChuSuDu
                "\"LIU_MIAO_JU_LI\" TEXT," + // 9: liuMiaoJuLi
                "\"ZHI_DONG_SHI_JIAN\" TEXT);"); // 10: zhiDongShiJian
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAN_ZAI_DOWN_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ManZaiDownEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKey());
 
        String maxSpeed = entity.getMaxSpeed();
        if (maxSpeed != null) {
            stmt.bindString(3, maxSpeed);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String point_speed = entity.getPoint_speed();
        if (point_speed != null) {
            stmt.bindString(5, point_speed);
        }
 
        String runTimeTotal = entity.getRunTimeTotal();
        if (runTimeTotal != null) {
            stmt.bindString(6, runTimeTotal);
        }
 
        String breakTime = entity.getBreakTime();
        if (breakTime != null) {
            stmt.bindString(7, breakTime);
        }
 
        String zhiDongJuli = entity.getZhiDongJuli();
        if (zhiDongJuli != null) {
            stmt.bindString(8, zhiDongJuli);
        }
 
        String zhiDongChuSuDu = entity.getZhiDongChuSuDu();
        if (zhiDongChuSuDu != null) {
            stmt.bindString(9, zhiDongChuSuDu);
        }
 
        String liuMiaoJuLi = entity.getLiuMiaoJuLi();
        if (liuMiaoJuLi != null) {
            stmt.bindString(10, liuMiaoJuLi);
        }
 
        String zhiDongShiJian = entity.getZhiDongShiJian();
        if (zhiDongShiJian != null) {
            stmt.bindString(11, zhiDongShiJian);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ManZaiDownEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKey());
 
        String maxSpeed = entity.getMaxSpeed();
        if (maxSpeed != null) {
            stmt.bindString(3, maxSpeed);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        String point_speed = entity.getPoint_speed();
        if (point_speed != null) {
            stmt.bindString(5, point_speed);
        }
 
        String runTimeTotal = entity.getRunTimeTotal();
        if (runTimeTotal != null) {
            stmt.bindString(6, runTimeTotal);
        }
 
        String breakTime = entity.getBreakTime();
        if (breakTime != null) {
            stmt.bindString(7, breakTime);
        }
 
        String zhiDongJuli = entity.getZhiDongJuli();
        if (zhiDongJuli != null) {
            stmt.bindString(8, zhiDongJuli);
        }
 
        String zhiDongChuSuDu = entity.getZhiDongChuSuDu();
        if (zhiDongChuSuDu != null) {
            stmt.bindString(9, zhiDongChuSuDu);
        }
 
        String liuMiaoJuLi = entity.getLiuMiaoJuLi();
        if (liuMiaoJuLi != null) {
            stmt.bindString(10, liuMiaoJuLi);
        }
 
        String zhiDongShiJian = entity.getZhiDongShiJian();
        if (zhiDongShiJian != null) {
            stmt.bindString(11, zhiDongShiJian);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ManZaiDownEntity readEntity(Cursor cursor, int offset) {
        ManZaiDownEntity entity = new ManZaiDownEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // maxSpeed
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // point_speed
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // runTimeTotal
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // breakTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // zhiDongJuli
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zhiDongChuSuDu
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // liuMiaoJuLi
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // zhiDongShiJian
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ManZaiDownEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.getLong(offset + 1));
        entity.setMaxSpeed(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPoint_speed(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRunTimeTotal(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBreakTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZhiDongJuli(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZhiDongChuSuDu(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLiuMiaoJuLi(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setZhiDongShiJian(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ManZaiDownEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ManZaiDownEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ManZaiDownEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
