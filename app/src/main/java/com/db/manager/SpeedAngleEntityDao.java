package com.db.manager;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.hu.huproject.Entity.SpeedAngleEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPEED_ANGLE_ENTITY".
*/
public class SpeedAngleEntityDao extends AbstractDao<SpeedAngleEntity, Long> {

    public static final String TABLENAME = "SPEED_ANGLE_ENTITY";

    /**
     * Properties of entity SpeedAngleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Key = new Property(1, long.class, "key", false, "KEY");
        public final static Property RunSpeed = new Property(2, String.class, "runSpeed", false, "RUN_SPEED");
        public final static Property MaxSpeed = new Property(3, String.class, "maxSpeed", false, "MAX_SPEED");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Point_speed = new Property(5, String.class, "point_speed", false, "POINT_SPEED");
        public final static Property RunTimeTotal = new Property(6, String.class, "runTimeTotal", false, "RUN_TIME_TOTAL");
        public final static Property Point_angle = new Property(7, String.class, "point_angle", false, "POINT_ANGLE");
        public final static Property MaxAngle = new Property(8, String.class, "maxAngle", false, "MAX_ANGLE");
        public final static Property Yunsu_startTime = new Property(9, String.class, "yunsu_startTime", false, "YUNSU_START_TIME");
        public final static Property Yunsu_endTime = new Property(10, String.class, "yunsu_endTime", false, "YUNSU_END_TIME");
        public final static Property Yunsu_runTime = new Property(11, String.class, "yunsu_runTime", false, "YUNSU_RUN_TIME");
        public final static Property Yunsu_averageSpeed = new Property(12, String.class, "yunsu_averageSpeed", false, "YUNSU_AVERAGE_SPEED");
        public final static Property Jiansu_startTime = new Property(13, String.class, "jiansu_startTime", false, "JIANSU_START_TIME");
        public final static Property Jiansu_endTime = new Property(14, String.class, "jiansu_endTime", false, "JIANSU_END_TIME");
        public final static Property Jiansu_avegare_jiansudu = new Property(15, String.class, "jiansu_avegare_jiansudu", false, "JIANSU_AVEGARE_JIANSUDU");
        public final static Property Jiansu_time = new Property(16, String.class, "jiansu_time", false, "JIANSU_TIME");
        public final static Property Jiansu_chusudu = new Property(17, String.class, "jiansu_chusudu", false, "JIANSU_CHUSUDU");
        public final static Property Jiansu_mosudu = new Property(18, String.class, "jiansu_mosudu", false, "JIANSU_MOSUDU");
        public final static Property Jiansu_maxspeed = new Property(19, String.class, "jiansu_maxspeed", false, "JIANSU_MAXSPEED");
        public final static Property Jiansu_minspeed = new Property(20, String.class, "jiansu_minspeed", false, "JIANSU_MINSPEED");
    }


    public SpeedAngleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SpeedAngleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPEED_ANGLE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY\" INTEGER NOT NULL ," + // 1: key
                "\"RUN_SPEED\" TEXT," + // 2: runSpeed
                "\"MAX_SPEED\" TEXT," + // 3: maxSpeed
                "\"TIME\" TEXT," + // 4: time
                "\"POINT_SPEED\" TEXT," + // 5: point_speed
                "\"RUN_TIME_TOTAL\" TEXT," + // 6: runTimeTotal
                "\"POINT_ANGLE\" TEXT," + // 7: point_angle
                "\"MAX_ANGLE\" TEXT," + // 8: maxAngle
                "\"YUNSU_START_TIME\" TEXT," + // 9: yunsu_startTime
                "\"YUNSU_END_TIME\" TEXT," + // 10: yunsu_endTime
                "\"YUNSU_RUN_TIME\" TEXT," + // 11: yunsu_runTime
                "\"YUNSU_AVERAGE_SPEED\" TEXT," + // 12: yunsu_averageSpeed
                "\"JIANSU_START_TIME\" TEXT," + // 13: jiansu_startTime
                "\"JIANSU_END_TIME\" TEXT," + // 14: jiansu_endTime
                "\"JIANSU_AVEGARE_JIANSUDU\" TEXT," + // 15: jiansu_avegare_jiansudu
                "\"JIANSU_TIME\" TEXT," + // 16: jiansu_time
                "\"JIANSU_CHUSUDU\" TEXT," + // 17: jiansu_chusudu
                "\"JIANSU_MOSUDU\" TEXT," + // 18: jiansu_mosudu
                "\"JIANSU_MAXSPEED\" TEXT," + // 19: jiansu_maxspeed
                "\"JIANSU_MINSPEED\" TEXT);"); // 20: jiansu_minspeed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPEED_ANGLE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SpeedAngleEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKey());
 
        String runSpeed = entity.getRunSpeed();
        if (runSpeed != null) {
            stmt.bindString(3, runSpeed);
        }
 
        String maxSpeed = entity.getMaxSpeed();
        if (maxSpeed != null) {
            stmt.bindString(4, maxSpeed);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String point_speed = entity.getPoint_speed();
        if (point_speed != null) {
            stmt.bindString(6, point_speed);
        }
 
        String runTimeTotal = entity.getRunTimeTotal();
        if (runTimeTotal != null) {
            stmt.bindString(7, runTimeTotal);
        }
 
        String point_angle = entity.getPoint_angle();
        if (point_angle != null) {
            stmt.bindString(8, point_angle);
        }
 
        String maxAngle = entity.getMaxAngle();
        if (maxAngle != null) {
            stmt.bindString(9, maxAngle);
        }
 
        String yunsu_startTime = entity.getYunsu_startTime();
        if (yunsu_startTime != null) {
            stmt.bindString(10, yunsu_startTime);
        }
 
        String yunsu_endTime = entity.getYunsu_endTime();
        if (yunsu_endTime != null) {
            stmt.bindString(11, yunsu_endTime);
        }
 
        String yunsu_runTime = entity.getYunsu_runTime();
        if (yunsu_runTime != null) {
            stmt.bindString(12, yunsu_runTime);
        }
 
        String yunsu_averageSpeed = entity.getYunsu_averageSpeed();
        if (yunsu_averageSpeed != null) {
            stmt.bindString(13, yunsu_averageSpeed);
        }
 
        String jiansu_startTime = entity.getJiansu_startTime();
        if (jiansu_startTime != null) {
            stmt.bindString(14, jiansu_startTime);
        }
 
        String jiansu_endTime = entity.getJiansu_endTime();
        if (jiansu_endTime != null) {
            stmt.bindString(15, jiansu_endTime);
        }
 
        String jiansu_avegare_jiansudu = entity.getJiansu_avegare_jiansudu();
        if (jiansu_avegare_jiansudu != null) {
            stmt.bindString(16, jiansu_avegare_jiansudu);
        }
 
        String jiansu_time = entity.getJiansu_time();
        if (jiansu_time != null) {
            stmt.bindString(17, jiansu_time);
        }
 
        String jiansu_chusudu = entity.getJiansu_chusudu();
        if (jiansu_chusudu != null) {
            stmt.bindString(18, jiansu_chusudu);
        }
 
        String jiansu_mosudu = entity.getJiansu_mosudu();
        if (jiansu_mosudu != null) {
            stmt.bindString(19, jiansu_mosudu);
        }
 
        String jiansu_maxspeed = entity.getJiansu_maxspeed();
        if (jiansu_maxspeed != null) {
            stmt.bindString(20, jiansu_maxspeed);
        }
 
        String jiansu_minspeed = entity.getJiansu_minspeed();
        if (jiansu_minspeed != null) {
            stmt.bindString(21, jiansu_minspeed);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SpeedAngleEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getKey());
 
        String runSpeed = entity.getRunSpeed();
        if (runSpeed != null) {
            stmt.bindString(3, runSpeed);
        }
 
        String maxSpeed = entity.getMaxSpeed();
        if (maxSpeed != null) {
            stmt.bindString(4, maxSpeed);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String point_speed = entity.getPoint_speed();
        if (point_speed != null) {
            stmt.bindString(6, point_speed);
        }
 
        String runTimeTotal = entity.getRunTimeTotal();
        if (runTimeTotal != null) {
            stmt.bindString(7, runTimeTotal);
        }
 
        String point_angle = entity.getPoint_angle();
        if (point_angle != null) {
            stmt.bindString(8, point_angle);
        }
 
        String maxAngle = entity.getMaxAngle();
        if (maxAngle != null) {
            stmt.bindString(9, maxAngle);
        }
 
        String yunsu_startTime = entity.getYunsu_startTime();
        if (yunsu_startTime != null) {
            stmt.bindString(10, yunsu_startTime);
        }
 
        String yunsu_endTime = entity.getYunsu_endTime();
        if (yunsu_endTime != null) {
            stmt.bindString(11, yunsu_endTime);
        }
 
        String yunsu_runTime = entity.getYunsu_runTime();
        if (yunsu_runTime != null) {
            stmt.bindString(12, yunsu_runTime);
        }
 
        String yunsu_averageSpeed = entity.getYunsu_averageSpeed();
        if (yunsu_averageSpeed != null) {
            stmt.bindString(13, yunsu_averageSpeed);
        }
 
        String jiansu_startTime = entity.getJiansu_startTime();
        if (jiansu_startTime != null) {
            stmt.bindString(14, jiansu_startTime);
        }
 
        String jiansu_endTime = entity.getJiansu_endTime();
        if (jiansu_endTime != null) {
            stmt.bindString(15, jiansu_endTime);
        }
 
        String jiansu_avegare_jiansudu = entity.getJiansu_avegare_jiansudu();
        if (jiansu_avegare_jiansudu != null) {
            stmt.bindString(16, jiansu_avegare_jiansudu);
        }
 
        String jiansu_time = entity.getJiansu_time();
        if (jiansu_time != null) {
            stmt.bindString(17, jiansu_time);
        }
 
        String jiansu_chusudu = entity.getJiansu_chusudu();
        if (jiansu_chusudu != null) {
            stmt.bindString(18, jiansu_chusudu);
        }
 
        String jiansu_mosudu = entity.getJiansu_mosudu();
        if (jiansu_mosudu != null) {
            stmt.bindString(19, jiansu_mosudu);
        }
 
        String jiansu_maxspeed = entity.getJiansu_maxspeed();
        if (jiansu_maxspeed != null) {
            stmt.bindString(20, jiansu_maxspeed);
        }
 
        String jiansu_minspeed = entity.getJiansu_minspeed();
        if (jiansu_minspeed != null) {
            stmt.bindString(21, jiansu_minspeed);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SpeedAngleEntity readEntity(Cursor cursor, int offset) {
        SpeedAngleEntity entity = new SpeedAngleEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // runSpeed
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // maxSpeed
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // point_speed
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // runTimeTotal
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // point_angle
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // maxAngle
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // yunsu_startTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // yunsu_endTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // yunsu_runTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // yunsu_averageSpeed
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // jiansu_startTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // jiansu_endTime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // jiansu_avegare_jiansudu
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // jiansu_time
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // jiansu_chusudu
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // jiansu_mosudu
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // jiansu_maxspeed
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // jiansu_minspeed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SpeedAngleEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.getLong(offset + 1));
        entity.setRunSpeed(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaxSpeed(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPoint_speed(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRunTimeTotal(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPoint_angle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMaxAngle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setYunsu_startTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setYunsu_endTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setYunsu_runTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setYunsu_averageSpeed(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setJiansu_startTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setJiansu_endTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setJiansu_avegare_jiansudu(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setJiansu_time(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setJiansu_chusudu(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setJiansu_mosudu(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setJiansu_maxspeed(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setJiansu_minspeed(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SpeedAngleEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SpeedAngleEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SpeedAngleEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
