package com.db.manager;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.hu.huproject.Entity.TaskEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_ENTITY".
*/
public class TaskEntityDao extends AbstractDao<TaskEntity, Long> {

    public static final String TABLENAME = "TASK_ENTITY";

    /**
     * Properties of entity TaskEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UnitName = new Property(1, String.class, "unitName", false, "UNIT_NAME");
        public final static Property ConvNumber = new Property(2, String.class, "convNumber", false, "CONV_NUMBER");
        public final static Property PeopleName = new Property(3, String.class, "peopleName", false, "PEOPLE_NAME");
        public final static Property _IsCompleteTask = new Property(4, boolean.class, "_IsCompleteTask", false, "__IS_COMPLETE_TASK");
        public final static Property GreateTaskTime = new Property(5, String.class, "greateTaskTime", false, "GREATE_TASK_TIME");
        public final static Property TashHaveGetData = new Property(6, int.class, "tashHaveGetData", false, "TASH_HAVE_GET_DATA");
        public final static Property TaskType = new Property(7, int.class, "taskType", false, "TASK_TYPE");
        public final static Property Is_SpeedAngleSave = new Property(8, boolean.class, "is_SpeedAngleSave", false, "IS__SPEED_ANGLE_SAVE");
        public final static Property Is_SpeedSave = new Property(9, boolean.class, "is_SpeedSave", false, "IS__SPEED_SAVE");
        public final static Property Is_AngleSave = new Property(10, boolean.class, "is_AngleSave", false, "IS__ANGLE_SAVE");
        public final static Property Is_KongTimeSave = new Property(11, boolean.class, "is_KongTimeSave", false, "IS__KONG_TIME_SAVE");
        public final static Property Is_ManZaiXiangXiaSave = new Property(12, boolean.class, "is_ManZaiXiangXiaSave", false, "IS__MAN_ZAI_XIANG_XIA_SAVE");
        public final static Property Is_KongZaiUpSave = new Property(13, boolean.class, "is_KongZaiUpSave", false, "IS__KONG_ZAI_UP_SAVE");
        public final static Property Is_QianYinLiSave = new Property(14, boolean.class, "is_QianYinLiSave", false, "IS__QIAN_YIN_LI_SAVE");
        public final static Property Is_ZhiDongLiSave = new Property(15, boolean.class, "is_ZhiDongLiSave", false, "IS__ZHI_DONG_LI_SAVE");
        public final static Property Is_HuiShengLunSave = new Property(16, boolean.class, "is_HuiShengLunSave", false, "IS__HUI_SHENG_LUN_SAVE");
        public final static Property ZdlTestingNum = new Property(17, Integer.class, "zdlTestingNum", false, "ZDL_TESTING_NUM");
        public final static Property QylTestingNum = new Property(18, Integer.class, "qylTestingNum", false, "QYL_TESTING_NUM");
        public final static Property HslTestingNum = new Property(19, Integer.class, "hslTestingNum", false, "HSL_TESTING_NUM");
        public final static Property TaskHaveGetData = new Property(20, int.class, "taskHaveGetData", false, "TASK_HAVE_GET_DATA");
        public final static Property IsAllowInput = new Property(21, boolean.class, "isAllowInput", false, "IS_ALLOW_INPUT");
        public final static Property Is_WeightSave = new Property(22, boolean.class, "is_WeightSave", false, "IS__WEIGHT_SAVE");
    }


    public TaskEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TaskEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNIT_NAME\" TEXT," + // 1: unitName
                "\"CONV_NUMBER\" TEXT," + // 2: convNumber
                "\"PEOPLE_NAME\" TEXT," + // 3: peopleName
                "\"__IS_COMPLETE_TASK\" INTEGER NOT NULL ," + // 4: _IsCompleteTask
                "\"GREATE_TASK_TIME\" TEXT," + // 5: greateTaskTime
                "\"TASH_HAVE_GET_DATA\" INTEGER NOT NULL ," + // 6: tashHaveGetData
                "\"TASK_TYPE\" INTEGER NOT NULL ," + // 7: taskType
                "\"IS__SPEED_ANGLE_SAVE\" INTEGER NOT NULL ," + // 8: is_SpeedAngleSave
                "\"IS__SPEED_SAVE\" INTEGER NOT NULL ," + // 9: is_SpeedSave
                "\"IS__ANGLE_SAVE\" INTEGER NOT NULL ," + // 10: is_AngleSave
                "\"IS__KONG_TIME_SAVE\" INTEGER NOT NULL ," + // 11: is_KongTimeSave
                "\"IS__MAN_ZAI_XIANG_XIA_SAVE\" INTEGER NOT NULL ," + // 12: is_ManZaiXiangXiaSave
                "\"IS__KONG_ZAI_UP_SAVE\" INTEGER NOT NULL ," + // 13: is_KongZaiUpSave
                "\"IS__QIAN_YIN_LI_SAVE\" INTEGER NOT NULL ," + // 14: is_QianYinLiSave
                "\"IS__ZHI_DONG_LI_SAVE\" INTEGER NOT NULL ," + // 15: is_ZhiDongLiSave
                "\"IS__HUI_SHENG_LUN_SAVE\" INTEGER NOT NULL ," + // 16: is_HuiShengLunSave
                "\"ZDL_TESTING_NUM\" INTEGER," + // 17: zdlTestingNum
                "\"QYL_TESTING_NUM\" INTEGER," + // 18: qylTestingNum
                "\"HSL_TESTING_NUM\" INTEGER," + // 19: hslTestingNum
                "\"TASK_HAVE_GET_DATA\" INTEGER NOT NULL ," + // 20: taskHaveGetData
                "\"IS_ALLOW_INPUT\" INTEGER NOT NULL ," + // 21: isAllowInput
                "\"IS__WEIGHT_SAVE\" INTEGER NOT NULL );"); // 22: is_WeightSave
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String unitName = entity.getUnitName();
        if (unitName != null) {
            stmt.bindString(2, unitName);
        }
 
        String convNumber = entity.getConvNumber();
        if (convNumber != null) {
            stmt.bindString(3, convNumber);
        }
 
        String peopleName = entity.getPeopleName();
        if (peopleName != null) {
            stmt.bindString(4, peopleName);
        }
        stmt.bindLong(5, entity.get_IsCompleteTask() ? 1L: 0L);
 
        String greateTaskTime = entity.getGreateTaskTime();
        if (greateTaskTime != null) {
            stmt.bindString(6, greateTaskTime);
        }
        stmt.bindLong(7, entity.getTashHaveGetData());
        stmt.bindLong(8, entity.getTaskType());
        stmt.bindLong(9, entity.getIs_SpeedAngleSave() ? 1L: 0L);
        stmt.bindLong(10, entity.getIs_SpeedSave() ? 1L: 0L);
        stmt.bindLong(11, entity.getIs_AngleSave() ? 1L: 0L);
        stmt.bindLong(12, entity.getIs_KongTimeSave() ? 1L: 0L);
        stmt.bindLong(13, entity.getIs_ManZaiXiangXiaSave() ? 1L: 0L);
        stmt.bindLong(14, entity.getIs_KongZaiUpSave() ? 1L: 0L);
        stmt.bindLong(15, entity.getIs_QianYinLiSave() ? 1L: 0L);
        stmt.bindLong(16, entity.getIs_ZhiDongLiSave() ? 1L: 0L);
        stmt.bindLong(17, entity.getIs_HuiShengLunSave() ? 1L: 0L);
 
        Integer zdlTestingNum = entity.getZdlTestingNum();
        if (zdlTestingNum != null) {
            stmt.bindLong(18, zdlTestingNum);
        }
 
        Integer qylTestingNum = entity.getQylTestingNum();
        if (qylTestingNum != null) {
            stmt.bindLong(19, qylTestingNum);
        }
 
        Integer hslTestingNum = entity.getHslTestingNum();
        if (hslTestingNum != null) {
            stmt.bindLong(20, hslTestingNum);
        }
        stmt.bindLong(21, entity.getTaskHaveGetData());
        stmt.bindLong(22, entity.getIsAllowInput() ? 1L: 0L);
        stmt.bindLong(23, entity.getIs_WeightSave() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String unitName = entity.getUnitName();
        if (unitName != null) {
            stmt.bindString(2, unitName);
        }
 
        String convNumber = entity.getConvNumber();
        if (convNumber != null) {
            stmt.bindString(3, convNumber);
        }
 
        String peopleName = entity.getPeopleName();
        if (peopleName != null) {
            stmt.bindString(4, peopleName);
        }
        stmt.bindLong(5, entity.get_IsCompleteTask() ? 1L: 0L);
 
        String greateTaskTime = entity.getGreateTaskTime();
        if (greateTaskTime != null) {
            stmt.bindString(6, greateTaskTime);
        }
        stmt.bindLong(7, entity.getTashHaveGetData());
        stmt.bindLong(8, entity.getTaskType());
        stmt.bindLong(9, entity.getIs_SpeedAngleSave() ? 1L: 0L);
        stmt.bindLong(10, entity.getIs_SpeedSave() ? 1L: 0L);
        stmt.bindLong(11, entity.getIs_AngleSave() ? 1L: 0L);
        stmt.bindLong(12, entity.getIs_KongTimeSave() ? 1L: 0L);
        stmt.bindLong(13, entity.getIs_ManZaiXiangXiaSave() ? 1L: 0L);
        stmt.bindLong(14, entity.getIs_KongZaiUpSave() ? 1L: 0L);
        stmt.bindLong(15, entity.getIs_QianYinLiSave() ? 1L: 0L);
        stmt.bindLong(16, entity.getIs_ZhiDongLiSave() ? 1L: 0L);
        stmt.bindLong(17, entity.getIs_HuiShengLunSave() ? 1L: 0L);
 
        Integer zdlTestingNum = entity.getZdlTestingNum();
        if (zdlTestingNum != null) {
            stmt.bindLong(18, zdlTestingNum);
        }
 
        Integer qylTestingNum = entity.getQylTestingNum();
        if (qylTestingNum != null) {
            stmt.bindLong(19, qylTestingNum);
        }
 
        Integer hslTestingNum = entity.getHslTestingNum();
        if (hslTestingNum != null) {
            stmt.bindLong(20, hslTestingNum);
        }
        stmt.bindLong(21, entity.getTaskHaveGetData());
        stmt.bindLong(22, entity.getIsAllowInput() ? 1L: 0L);
        stmt.bindLong(23, entity.getIs_WeightSave() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskEntity readEntity(Cursor cursor, int offset) {
        TaskEntity entity = new TaskEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // unitName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // convNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // peopleName
            cursor.getShort(offset + 4) != 0, // _IsCompleteTask
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // greateTaskTime
            cursor.getInt(offset + 6), // tashHaveGetData
            cursor.getInt(offset + 7), // taskType
            cursor.getShort(offset + 8) != 0, // is_SpeedAngleSave
            cursor.getShort(offset + 9) != 0, // is_SpeedSave
            cursor.getShort(offset + 10) != 0, // is_AngleSave
            cursor.getShort(offset + 11) != 0, // is_KongTimeSave
            cursor.getShort(offset + 12) != 0, // is_ManZaiXiangXiaSave
            cursor.getShort(offset + 13) != 0, // is_KongZaiUpSave
            cursor.getShort(offset + 14) != 0, // is_QianYinLiSave
            cursor.getShort(offset + 15) != 0, // is_ZhiDongLiSave
            cursor.getShort(offset + 16) != 0, // is_HuiShengLunSave
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // zdlTestingNum
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // qylTestingNum
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // hslTestingNum
            cursor.getInt(offset + 20), // taskHaveGetData
            cursor.getShort(offset + 21) != 0, // isAllowInput
            cursor.getShort(offset + 22) != 0 // is_WeightSave
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnitName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setConvNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPeopleName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.set_IsCompleteTask(cursor.getShort(offset + 4) != 0);
        entity.setGreateTaskTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTashHaveGetData(cursor.getInt(offset + 6));
        entity.setTaskType(cursor.getInt(offset + 7));
        entity.setIs_SpeedAngleSave(cursor.getShort(offset + 8) != 0);
        entity.setIs_SpeedSave(cursor.getShort(offset + 9) != 0);
        entity.setIs_AngleSave(cursor.getShort(offset + 10) != 0);
        entity.setIs_KongTimeSave(cursor.getShort(offset + 11) != 0);
        entity.setIs_ManZaiXiangXiaSave(cursor.getShort(offset + 12) != 0);
        entity.setIs_KongZaiUpSave(cursor.getShort(offset + 13) != 0);
        entity.setIs_QianYinLiSave(cursor.getShort(offset + 14) != 0);
        entity.setIs_ZhiDongLiSave(cursor.getShort(offset + 15) != 0);
        entity.setIs_HuiShengLunSave(cursor.getShort(offset + 16) != 0);
        entity.setZdlTestingNum(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setQylTestingNum(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setHslTestingNum(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setTaskHaveGetData(cursor.getInt(offset + 20));
        entity.setIsAllowInput(cursor.getShort(offset + 21) != 0);
        entity.setIs_WeightSave(cursor.getShort(offset + 22) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
